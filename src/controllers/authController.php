<?phpnamespace controllers;require_once '../models/auth.php';class authController{    public function registerUser(): void    {        $fields =[            'Email' => 'Email is required',            'contactNumber' => 'Contact Number is required',            'Address' => 'Address is required',            'username' => 'Username is required',            'password' => 'Password is required'        ];        $data = [];        $error = [];        foreach ($fields as $field => $message) {            if (empty($_POST[$field])) {                $error[$field] = $message;            } else {                $data[$field] = $_POST[$field];            }        }        if (!empty($error)) {              $data['success'] = false;              $data['error'] = $error;              echo json_encode($data);            return;        }        $auth = new \models\auth();        //hash password        $data['password'] = password_hash($data['password'], PASSWORD_BCRYPT);        $auth->registerUser($data['username'], $data['password'], $data['Email'], $data['contactNumber'], $data['Address']);    }    public function LoginUser():void    {        $username = htmlspecialchars($_POST['usernameLogin']);        $password = htmlspecialchars($_POST['passwordLogin']);        if (empty($username)) {            echo json_encode(['success'=> false,'message'=>'Invalid username or password']);            return;        }        if (empty($password)) {            echo json_encode(['success'=> false,'message'=>'Invalid username or password']);            return;        }        $auth = new \models\auth();        $auth->loginUser($username, $password);    }}if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {    $auth = new authController();    switch ($_POST['action']) {        case 'register':            $auth->registerUser();            break;        case 'login':            $auth->LoginUser();            break;        default:            echo 'Method not Allowed';            break;    }}